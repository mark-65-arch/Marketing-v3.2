---
// üèóÔ∏è Main Layout Component
// Purpose: Complete page layout with header, footer, and SEO optimization
// Features: Integrated SEO, structured data, performance optimizations

import BaseLayout from './BaseLayout.astro';
import GlobalNav from '../components/GlobalNav.astro';
import Footer from '../components/Footer.astro';

import {
  generateLocalBusinessSchema,
  generateBreadcrumbSchema,
  generateOpenGraphTags,
  generateTwitterCardTags,
  type SEOConfig,
  type BreadcrumbItem,
  DEFAULT_SEO,
  BUSINESS_INFO
} from '../utils/seo.ts';

interface Props extends SEOConfig {
  showNewsletter?: boolean;
  breadcrumbs?: BreadcrumbItem[];
  structuredData?: object[];
  currentPath?: string;
  pageType?: 'home' | 'service' | 'contact' | 'about' | 'blog';
  lang?: string;
  alternateLanguages?: { lang: string; url: string }[];
}

const {
  title = DEFAULT_SEO.title,
  description = DEFAULT_SEO.description,
  canonicalURL,
  ogImage = `${import.meta.env.SITE}${import.meta.env.BASE_URL}og-image.png`,
  ogType = 'website',
  noindex = false,
  keywords = DEFAULT_SEO.keywords,
  author = DEFAULT_SEO.author,
  publishedTime,
  modifiedTime,
  showNewsletter = false,
  breadcrumbs = [],
  structuredData = [],
  currentPath = Astro.url.pathname,
  pageType = 'home',
  lang = 'en',
  alternateLanguages = []
} = Astro.props;

// üîç SEO: Enhanced title with brand consistency
const fullTitle = title.includes(BUSINESS_INFO.name)
  ? title
  : `${title} | ${BUSINESS_INFO.name}`;

// üìä Structured Data: Always include local business + additional schemas
const allStructuredData = [
  generateLocalBusinessSchema(),
  ...(breadcrumbs.length > 0 ? [generateBreadcrumbSchema(breadcrumbs)] : []),
  ...structuredData
];

// üè∑Ô∏è Generate meta tags
const ogTags = generateOpenGraphTags({
  title: fullTitle,
  description,
  canonicalURL,
  ogImage,
  ogType,
  publishedTime,
  modifiedTime
});

const twitterTags = generateTwitterCardTags({
  title: fullTitle,
  description,
  ogImage
});

// üì± Viewport configuration based on page type
const viewportConfig = pageType === 'contact'
  ? 'width=device-width, initial-scale=1.0, user-scalable=yes'
  : 'width=device-width, initial-scale=1.0';
---

<BaseLayout
  title={fullTitle}
  description={description}
  canonicalURL={canonicalURL}
  ogImage={ogImage}
  noindex={noindex}
  lang={lang}
  alternateLanguages={alternateLanguages}
>
  <!-- üîç Enhanced SEO Meta Tags -->
  <Fragment slot="head">
    <!-- üì± Responsive viewport -->
    <meta name="viewport" content={viewportConfig} />

    <!-- üè∑Ô∏è Keywords (limited for modern SEO) -->
    {keywords && keywords.length > 0 && (
      <meta name="keywords" content={keywords.join(', ')} />
    )}

    <!-- ‚úçÔ∏è Author information -->
    {author && <meta name="author" content={author} />}

    <!-- üïí Publication dates -->
    {publishedTime && <meta name="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta name="article:modified_time" content={modifiedTime} />}

    <!-- üåê Open Graph tags -->
    {ogTags.map(tag => (
      <meta property={tag.property} content={tag.content} />
    ))}

    <!-- üê¶ Twitter Card tags -->
    {twitterTags.map(tag => (
      <meta name={tag.name} content={tag.content} />
    ))}

    <!-- üîó Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://usebasin.com" />
    <link rel="preconnect" href="https://calendly.com" />

    <!-- üé® Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800;900&family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet" />

    <!-- üé® Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha384-iw3OoTErCYJJB9mCa8LNS2hbsQ7M3C0EpIsO/H5+EGAkPGc6rk+V8i04oW/K5xq0" crossorigin="anonymous" />

    <!-- üéØ Page-specific structured data -->
    {allStructuredData.map(schema => (
      <script type="application/ld+json" set:html={JSON.stringify(schema)} />
    ))}

    <!-- üìà WebPage structured data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "WebPage",
      "name": fullTitle,
      "description": description,
      "url": canonicalURL || Astro.url.toString(),
      "isPartOf": {
        "@type": "WebSite",
        "name": BUSINESS_INFO.name,
        "url": BUSINESS_INFO.url
      },
      "about": {
        "@id": `${BUSINESS_INFO.url}#business`
      }
    })} />
    </script>

    <!-- üîç Additional page-specific optimizations -->
    {pageType === 'home' && (
      <>
        <!-- Home page specific meta -->
        <!-- Add Google/Bing verification tokens when ready -->
        <link rel="alternate" type="application/rss+xml" title="Marketing AI Houston Blog" href="/rss.xml" />
      </>
    )}

    {pageType === 'contact' && (
      <>
        <!-- Contact page specific meta -->
        <meta name="telephone" content={BUSINESS_INFO.phone} />
        <meta name="contact" content={BUSINESS_INFO.email} />
      </>
    )}
  </Fragment>

  <!-- üß≠ Site Header -->
  <GlobalNav currentPath={currentPath} />

  <!-- üìç Breadcrumb Navigation (if provided) -->
  {breadcrumbs.length > 0 && (
    <nav aria-label="Breadcrumb" class="bg-gray-50 py-3">
      <div class="container mx-auto px-4">
        <ol class="flex items-center space-x-2 text-sm" itemscope itemtype="https://schema.org/BreadcrumbList">
          {breadcrumbs.map((crumb, index) => (
            <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="flex items-center">
              {index > 0 && (
                <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs" aria-hidden="true"></i>
              )}
              <a
                href={crumb.url}
                itemprop="item"
                class="text-gray-600 hover:text-blue-600 transition-colors"
                {...(index === breadcrumbs.length - 1 && { 'aria-current': 'page' })}
              >
                <span itemprop="name">{crumb.name}</span>
              </a>
              <meta itemprop="position" content={String(index + 1)} />
            </li>
          ))}
        </ol>
      </div>
    </nav>
  )}

  <!-- üìÑ Main Page Content -->
  <main role="main" id="main-content">
    <slot />
  </main>

  <!-- ü¶∂ Site Footer -->
  <Footer showNewsletter={showNewsletter} />

  <!-- Page-specific interactions -->
  <script define:vars={{ pageType, currentPath }} type="module">
    document.addEventListener('DOMContentLoaded', () => {
      // ‚úâÔ∏è Track email clicks
      const emailLinks = document.querySelectorAll('a[href^="mailto:"]');
      emailLinks.forEach(link => {
        link.addEventListener('click', () => {
          // Future: Send to analytics
          // e.g., gtag('event', 'email_click', { page: currentPath });
        });
      });
    });

    // ‚ôø Accessibility enhancements
    document.addEventListener('DOMContentLoaded', () => {
      // Skip link functionality (link is in GlobalNav component)
      const skipLink = document.querySelector('a[href="#main-content"]');
      if (skipLink) {
        skipLink.addEventListener('click', (e) => {
          e.preventDefault();
          const mainContent = document.getElementById('main-content');
          if (mainContent) {
            mainContent.setAttribute('tabindex', '-1');
            mainContent.focus();
            mainContent.scrollIntoView({ behavior: 'smooth' });
          }
        });
      }

      // Enhanced focus management for better keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          document.body.classList.add('user-tabbing');
        }
      });

      document.addEventListener('mousedown', () => {
        document.body.classList.remove('user-tabbing');
      });
    });

    // üéØ Performance: Lazy load background images
    document.addEventListener('DOMContentLoaded', () => {
      if ('IntersectionObserver' in window) {
        const bgImageObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target;
              const bgImage = element.getAttribute('data-bg');
              if (bgImage) {
                element.style.backgroundImage = `url(${bgImage})`;
                element.classList.add('bg-loaded');
                bgImageObserver.unobserve(element);
              }
            }
          });
        });

        document.querySelectorAll('[data-bg]').forEach(element => {
          bgImageObserver.observe(element);
        });
      }
    });
  </script>

  <!-- üé® Enhanced CSS for layout-specific styling -->
  <style>
    /* ‚ôø Accessibility: Screen reader only content */
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    .focus\\:not-sr-only:focus {
      position: static;
      width: auto;
      height: auto;
      padding: 0.5rem 1rem;
      margin: 0;
      overflow: visible;
      clip: auto;
      white-space: normal;
    }

    /* üéØ Enhanced focus indicators when tabbing */
    .user-tabbing *:focus {
      outline: 2px solid #3b82f6 !important;
      outline-offset: 2px;
    }

    /* üé® Smooth background image loading */
    [data-bg] {
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      transition: opacity 0.3s ease-in-out;
    }

    [data-bg]:not(.bg-loaded) {
      opacity: 0;
    }

    [data-bg].bg-loaded {
      opacity: 1;
    }

    /* üì± Mobile touch targets */
    @media (max-width: 768px) {
      button,
      a[role="button"],
      input[type="submit"],
      input[type="button"] {
        min-height: 44px;
        min-width: 44px;
      }
    }

    /* üéØ Print styles */
    @media print {
      .no-print {
        display: none !important;
      }

      header, footer {
        position: static !important;
      }

      * {
        background: white !important;
        color: black !important;
        box-shadow: none !important;
      }
    }
  </style>
</BaseLayout>